name: DevSecops Accelerator - Angular Boiler Plate
on:
  push:
    branches: [ "master" ] #Sample branch 
  pull_request:
    branches: [ "master" ] #Sample branch

    
#workflow_dispatch:

jobs:

  Code-Build-SonarScan:

    runs-on: ubuntu-latest

    steps:

    - name: checkout the code
      uses: actions/checkout@v4

    - name: Use Node.js 22
      uses: actions/setup-node@v3
      
      with:
        node-version: '22'
    - run: npm ci
    - run: npm run build --if-present
    

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        args: >
          -Dsonar.projectKey=my-angular-helloworld
      env:
        SONAR_HOST_URL: http://localhost:9000 
        SONAR_TOKEN: sqa_5adb54166520edabe10bcc623c1907f64871153d


    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-artifact
    #     path: dist
        
      
  Image-build:

    runs-on: ubuntu-latest

    #needs:
      #- Code-Build-SonarScan
    
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4

      # - name: Download build artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-artifact 

      -
        name: Docker Login
        uses: docker/login-action@v3.2.0 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Docker Build
        run: | 
          
          docker build -t angular-app:latest .
          docker save angular-app:latest -o angular-app.tar
    
      - name: List Docker Images
        run: docker images  
        
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-app
          path: angular-app.tar

  Image-scan:

    runs-on: ubuntu-latest

    needs:
      - Image-build

    steps:

      - 
       name: Download Docker image artifact
       uses: actions/download-artifact@v4
       with:
         name: angular-app

      - 
       name: Load Docker image
       run: docker load -i angular-app.tar   

      -
        name: Checkout
        uses: actions/checkout@v4

      -
        name: Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: angular-app:latest
          format: 'table'                   
          exit-code: '1'
          ignore-unfixed: true
          output: 'trivy-image-results.sarif'
          vuln-type: 'os,library' 
          severity: HIGH,CRITICAL
      
      - name: Save SARIF file
        run: |
          mkdir -p /tmp/artifacts
          cp trivy-image-results.sarif /tmp/artifacts/
          ls /tmp/artifacts/
          cat /tmp/artifacts/trivy-image-results.sarif

  Image-push:  
    
    runs-on: ubuntu-latest

    needs:
      - Image-scan

    outputs:
      image-tag: ${{ steps.set_image_tag.outputs.image-tag }}
 
    steps:

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-app

      - name: Load Docker image
        run: docker load -i angular-app.tar

      -
        name: Docker Login
        uses: docker/login-action@v3.2.0 
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Push image to Docker Hub
        run: |
          docker tag angular-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_accelerator:${{github.run_number}}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/devsecops_accelerator:${{github.run_number}}

      - name: Docker Tag
        id: set_image_tag
        run: |
          echo "image-tag=${{ github.run_number }}" >> $GITHUB_ENV
          echo "::set-output name=image-tag::${{ github.run_number }}"


  Helm-Validate:

    runs-on: ubuntu-latest

    needs:
    - Image-push

    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
          
    - name: Debug Environment Variables
      run: |
        echo "CHART_LOCATION: ${{ env.CHART_LOCATION }}"
        echo "CHART_VALUES: ${{ env.CHART_VALUES }}"

    - name: Set Image Tag
      run: echo "IMAGE_TAG= ${{ needs.Image-push.outputs.image-tag }}" >> $GITHUB_ENV

    - name: Update Helm   Values
      run: |
        sed -i "7s/tag: .*/tag: \"${{ env.IMAGE_TAG }}\"/" charts/values.yaml
        #cat charts/values.yaml   
        
    - name: GitHub Action for Helm Templates Validation
      uses: hopisaurus/helm-check-action@v0.1.1
      env:
        CHART_LOCATION: ./charts
        CHART_VALUES: ./charts/values.yaml

 
  Helm-Build:
    runs-on: ubuntu-latest
    needs:
      - Helm-Validate
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Output Directory
      run: mkdir -p packaged-charts

    - name: Create Helm Package
      run: helm package ./charts -d packaged-charts

    - name: Upload Packaged Charts
      uses: actions/upload-artifact@v2
      with:
        name: packaged-charts
        path: packaged-charts

  Helm-Push:

    runs-on: ubuntu-latest
    
    needs:
      - Helm-Build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Packaged Charts
      uses: actions/download-artifact@v2
      with:
        name: packaged-charts
        path: packaged-charts

    - name: Configure Git
      run: |
        git config --global user.email monishamon1305@gmail.com
        git config --global user.name MonishaNelson


    - name: Push Helm Chart to GitHub
      env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          
      run: |
        CHART_VERSION=$(cat charts/Chart.yaml | grep '^version:' | awk '{print $2}')
        CHART_NAME=$(cat charts/Chart.yaml | grep '^name:' | awk '{print $2}')
        PACKAGE_NAME="packaged-charts/${CHART_NAME}-${CHART_VERSION}.tgz"
        echo "Package Name: $PACKAGE_NAME"
        git clone https://github.com/MonishaNelson/Devsecops-Angular --branch gh-pages --single-branch gh-pages
        cd gh-pages
        git checkout -b gh-pages
        cp ../$PACKAGE_NAME .
        git add $PACKAGE_NAME
        git commit -m "Add $PACKAGE_NAME"
        git push origin gh-pages
          

          




 
        
                    
                  
                    
    